{"ast":null,"code":"var _jsxFileName = \"/Users/gilliannieh/exibit-curator/client/src/context/ExhibitContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExhibitContext = /*#__PURE__*/createContext();\nexport const useExhibit = () => {\n  _s();\n  const context = useContext(ExhibitContext);\n  if (!context) {\n    throw new Error('useExhibit must be used within an ExhibitProvider');\n  }\n  return context;\n};\n_s(useExhibit, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ExhibitProvider = ({\n  children\n}) => {\n  _s2();\n  const [exhibits, setExhibits] = useState([]);\n  const [currentExhibit, setCurrentExhibit] = useState(null);\n\n  // Load exhibits from localStorage on component mount\n  useEffect(() => {\n    const savedExhibits = localStorage.getItem('exhibitCurator-exhibits');\n    if (savedExhibits) {\n      try {\n        setExhibits(JSON.parse(savedExhibits));\n      } catch (error) {\n        console.error('Error loading exhibits from localStorage:', error);\n      }\n    }\n  }, []);\n\n  // Save exhibits to localStorage whenever exhibits change\n  useEffect(() => {\n    localStorage.setItem('exhibitCurator-exhibits', JSON.stringify(exhibits));\n  }, [exhibits]);\n  const createExhibit = (name, description = '') => {\n    const newExhibit = {\n      id: Date.now().toString(),\n      name,\n      description,\n      artworks: [],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    setExhibits(prev => [...prev, newExhibit]);\n    return newExhibit;\n  };\n  const updateExhibit = (exhibitId, updates) => {\n    setExhibits(prev => prev.map(exhibit => exhibit.id === exhibitId ? {\n      ...exhibit,\n      ...updates,\n      updatedAt: new Date().toISOString()\n    } : exhibit));\n  };\n  const deleteExhibit = exhibitId => {\n    setExhibits(prev => prev.filter(exhibit => exhibit.id !== exhibitId));\n    if ((currentExhibit === null || currentExhibit === void 0 ? void 0 : currentExhibit.id) === exhibitId) {\n      setCurrentExhibit(null);\n    }\n  };\n  const addArtworkToExhibit = (exhibitId, artwork) => {\n    setExhibits(prev => prev.map(exhibit => {\n      if (exhibit.id === exhibitId) {\n        // Check if artwork is already in the exhibit\n        const isAlreadyAdded = exhibit.artworks.some(art => art.id === artwork.id);\n        if (isAlreadyAdded) {\n          return exhibit;\n        }\n        return {\n          ...exhibit,\n          artworks: [...exhibit.artworks, artwork],\n          updatedAt: new Date().toISOString()\n        };\n      }\n      return exhibit;\n    }));\n  };\n  const removeArtworkFromExhibit = (exhibitId, artworkId) => {\n    setExhibits(prev => prev.map(exhibit => exhibit.id === exhibitId ? {\n      ...exhibit,\n      artworks: exhibit.artworks.filter(art => art.id !== artworkId),\n      updatedAt: new Date().toISOString()\n    } : exhibit));\n  };\n  const getExhibitById = exhibitId => {\n    return exhibits.find(exhibit => exhibit.id === exhibitId);\n  };\n  const isArtworkInExhibit = (exhibitId, artworkId) => {\n    const exhibit = getExhibitById(exhibitId);\n    return (exhibit === null || exhibit === void 0 ? void 0 : exhibit.artworks.some(art => art.id === artworkId)) || false;\n  };\n  const value = {\n    exhibits,\n    currentExhibit,\n    setCurrentExhibit,\n    createExhibit,\n    updateExhibit,\n    deleteExhibit,\n    addArtworkToExhibit,\n    removeArtworkFromExhibit,\n    getExhibitById,\n    isArtworkInExhibit\n  };\n  return /*#__PURE__*/_jsxDEV(ExhibitContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n_s2(ExhibitProvider, \"SlFf2q71griPl0WiLtB4VTwBRME=\");\n_c = ExhibitProvider;\nexport default ExhibitContext;\nvar _c;\n$RefreshReg$(_c, \"ExhibitProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","ExhibitContext","useExhibit","_s","context","Error","ExhibitProvider","children","_s2","exhibits","setExhibits","currentExhibit","setCurrentExhibit","savedExhibits","localStorage","getItem","JSON","parse","error","console","setItem","stringify","createExhibit","name","description","newExhibit","id","Date","now","toString","artworks","createdAt","toISOString","updatedAt","prev","updateExhibit","exhibitId","updates","map","exhibit","deleteExhibit","filter","addArtworkToExhibit","artwork","isAlreadyAdded","some","art","removeArtworkFromExhibit","artworkId","getExhibitById","find","isArtworkInExhibit","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gilliannieh/exibit-curator/client/src/context/ExhibitContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst ExhibitContext = createContext();\n\nexport const useExhibit = () => {\n  const context = useContext(ExhibitContext);\n  if (!context) {\n    throw new Error('useExhibit must be used within an ExhibitProvider');\n  }\n  return context;\n};\n\nexport const ExhibitProvider = ({ children }) => {\n  const [exhibits, setExhibits] = useState([]);\n  const [currentExhibit, setCurrentExhibit] = useState(null);\n\n  // Load exhibits from localStorage on component mount\n  useEffect(() => {\n    const savedExhibits = localStorage.getItem('exhibitCurator-exhibits');\n    if (savedExhibits) {\n      try {\n        setExhibits(JSON.parse(savedExhibits));\n      } catch (error) {\n        console.error('Error loading exhibits from localStorage:', error);\n      }\n    }\n  }, []);\n\n  // Save exhibits to localStorage whenever exhibits change\n  useEffect(() => {\n    localStorage.setItem('exhibitCurator-exhibits', JSON.stringify(exhibits));\n  }, [exhibits]);\n\n  const createExhibit = (name, description = '') => {\n    const newExhibit = {\n      id: Date.now().toString(),\n      name,\n      description,\n      artworks: [],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    \n    setExhibits(prev => [...prev, newExhibit]);\n    return newExhibit;\n  };\n\n  const updateExhibit = (exhibitId, updates) => {\n    setExhibits(prev => prev.map(exhibit => \n      exhibit.id === exhibitId \n        ? { ...exhibit, ...updates, updatedAt: new Date().toISOString() }\n        : exhibit\n    ));\n  };\n\n  const deleteExhibit = (exhibitId) => {\n    setExhibits(prev => prev.filter(exhibit => exhibit.id !== exhibitId));\n    if (currentExhibit?.id === exhibitId) {\n      setCurrentExhibit(null);\n    }\n  };\n\n  const addArtworkToExhibit = (exhibitId, artwork) => {\n    setExhibits(prev => prev.map(exhibit => {\n      if (exhibit.id === exhibitId) {\n        // Check if artwork is already in the exhibit\n        const isAlreadyAdded = exhibit.artworks.some(art => art.id === artwork.id);\n        if (isAlreadyAdded) {\n          return exhibit;\n        }\n        \n        return {\n          ...exhibit,\n          artworks: [...exhibit.artworks, artwork],\n          updatedAt: new Date().toISOString()\n        };\n      }\n      return exhibit;\n    }));\n  };\n\n  const removeArtworkFromExhibit = (exhibitId, artworkId) => {\n    setExhibits(prev => prev.map(exhibit => \n      exhibit.id === exhibitId \n        ? { \n            ...exhibit, \n            artworks: exhibit.artworks.filter(art => art.id !== artworkId),\n            updatedAt: new Date().toISOString()\n          }\n        : exhibit\n    ));\n  };\n\n  const getExhibitById = (exhibitId) => {\n    return exhibits.find(exhibit => exhibit.id === exhibitId);\n  };\n\n  const isArtworkInExhibit = (exhibitId, artworkId) => {\n    const exhibit = getExhibitById(exhibitId);\n    return exhibit?.artworks.some(art => art.id === artworkId) || false;\n  };\n\n  const value = {\n    exhibits,\n    currentExhibit,\n    setCurrentExhibit,\n    createExhibit,\n    updateExhibit,\n    deleteExhibit,\n    addArtworkToExhibit,\n    removeArtworkFromExhibit,\n    getExhibitById,\n    isArtworkInExhibit\n  };\n\n  return (\n    <ExhibitContext.Provider value={value}>\n      {children}\n    </ExhibitContext.Provider>\n  );\n};\n\nexport default ExhibitContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}